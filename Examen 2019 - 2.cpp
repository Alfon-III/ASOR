//Ej 1

VM1:

ip link set dev eth0 up
ip address add 192.168.0.1/24 dev eth0

VM2:
ip link set dev eth0 up
ip address add 192.168.0.2/24 dev eth0

zone "examen.es."{
	type master;
	file "db.examen.es";
	allow-query { any; };
};

$TTL 2d
examen.es. IN SOA ns.examen.es. contact.examen.es.(
		2003080800
		3h
		15M
		3W12h
		2h29M
	)
					IN 	NS 	ns
					IN  MX	10  mail.examen.es.
ns 					IN 	A 		192.168.0.1
www 				IN 	A 		192.168.0.200
mail.examen.es.		IN  A   	192.168.0.250
servidor.examen.es. IN 	CNAME mail.examen.es

named-checkzone examen.es.  /var/named/db.examen.es

En VM2:
gedit /etc/resolv.conf 

; generated by /usr/sbin/dhclient-script
search ns.examen.es.
nameserver 192.168.0.1

dig servidor.examen.es.
dig mail.examen.es.


//Ejercicio 2

#include <sys/types.h>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <string.h>
#include <sys/socket.h>
#include <netdb.h>

#define BUF_SIZE 500

int
main(int argc, char *argv[]) {
    struct addrinfo hints;
    struct addrinfo *result, *rp;
    int sfd, s, c;
    struct sockaddr_storage peer_addr;
    socklen_t peer_addr_len;
    ssize_t nread;
    char buf[BUF_SIZE];

    if (argc != 3) {
        fprintf(stderr, "Faltan argumentos\n");
        exit(EXIT_FAILURE);
    }

    memset(&hints, 0, sizeof(struct addrinfo));
    hints.ai_family = AF_UNSPEC;    /* Allow IPv4 or IPv6 */
    hints.ai_socktype = SOCK_STREAM; /* Datagram socket */
    hints.ai_flags = AI_PASSIVE;    /* For wildcard IP address */
    hints.ai_protocol = 0;          /* Any protocol */
    hints.ai_canonname = NULL;
    hints.ai_addr = NULL;
    hints.ai_next = NULL;

    s = getaddrinfo(argv[1], argv[2], &hints, &result);
    if (s != 0) {
        fprintf(stderr, "getaddrinfo: %s\n", gai_strerror(s));
        exit(EXIT_FAILURE);
    }

    /* getaddrinfo() returns a list of address structures.
    Try each address until we successfully bind(2).
    If socket(2) (or bind(2)) fails, we (close the socket
    and) try the next address. */

    for (rp = result; rp != NULL; rp = rp->ai_next) {
        sfd = socket(rp->ai_family, rp->ai_socktype,
        rp->ai_protocol);
        if (sfd == -1)
            continue;

        if (bind(sfd, rp->ai_addr, rp->ai_addrlen) == 0)
         break;                  /* Success */

            close(sfd);
    }

    if (rp == NULL) {               /* No address succeeded */
        fprintf(stderr, "Could not bind\n");
        exit(EXIT_FAILURE);
    }

    freeaddrinfo(result);           /* No longer needed */

    /* Read datagrams and echo them back to sender */

    //Listen

    listen(sfd, 5);
    char sms[500];

    while(1) {
		

       	int clisd = accept(sfd, (struct sockaddr *) &peer_addr, &peer_addr_len);

       	char host[NI_MAXHOST], service[NI_MAXSERV];

       	//Imprimir info de la conexión
        s = getnameinfo((struct sockaddr *) &peer_addr,
        peer_addr_len, host, NI_MAXHOST,
        service, NI_MAXSERV, NI_NUMERICSERV);
        if (s == 0)
            printf("Received from %s:%s\n", host, service);
        else
            fprintf(stderr, "getnameinfo: %s\n", gai_strerror(s));

        //Comunicación
        while(c = recv(clisd, sms, 40, 0)){
        	sms[c] = '\0';
        	printf("%s\n", sms);
        	send(clisd, host, 15, 0);       	
        }

    }
}

//Ejercicio 3

#include <sys/wait.h>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <string.h>

int
main(int argc, char *argv[]){

	int pipefd[2];
	pid_t pid, pid2;
	char buf;

	if (argc < 3) {
		fprintf(stderr, "Usage: %s <string>\n", argv[0]);
		exit(EXIT_FAILURE);
	}

	if (pipe(pipefd) == -1) {
		perror("pipe");
		exit(EXIT_FAILURE);
	}

	//CREAMOS PROCESO 1
	pid = fork();
		if (pid == -1) {
		perror("fork");
		exit(EXIT_FAILURE);
	}

	/*Proceso 1
	- Print PID
	- write std_out a pipe
	*/
	if (pid == 0) {

		printf("[PID 1]: %li\n", getpid());

		//Cerramos lectura
		close(pipefd[0]);

		//Disfrazamos a pipe por la salida estandar
		//Es decir que todo lo que se escriba por STD_OUT 
		//va a ir a la pipe de escritura
		dup2(pipefd[1], STDOUT_FILENO); 
		char *arg1[2] = {argv[1], NULL};  

		if(execv(argv[1], arg1) != 1){
			printf("Error en EXECV del Proceso 1\n");
			exit(EXIT_FAILURE);
		}

		_exit(EXIT_SUCCESS);

	} else {
		wait(NULL);
	}

	//CREAMOS PROCESO 2
	pid2 = fork();
	if (pid2 == -1) {
		perror("fork");
		exit(EXIT_FAILURE);
	}

	if (pid2 == 0) {
		//Cerramos escritura
		close(pipefd[1]);
		dup2(pipefd[0], STDIN_FILENO);

		printf("[PID 2]: %li\n", getpid());
		//Ejecutamos el comando
		//Guardamos en arg2 los argumentos
		//./conecta comando1 [comando2] arg2_1 arg2_2
		/*
		char *arg2[argc - 1];
		int i;
		for(i = 2; i < argc; i++ ){
			arg2[i - 2] = argv[i];
		}
		arg2[argc - 1] = NULL;*/
		char *arg2[3] = {argv[2], argv[3], NULL};
		if(execv(argv[2], arg2) != 1){
			printf("Error en EXECV del Proceso 2\n");
			exit(EXIT_FAILURE);
		}


		_exit(EXIT_SUCCESS);

	} else {
		wait(NULL);
	}

}



//Ejemplo pipes para usar de guia
#include <sys/wait.h>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <string.h>

int
main(int argc, char *argv[]){

	int pipefd[2];
	pid_t cpid;
	char buf;

	if (argc != 2) {
		fprintf(stderr, "Usage: %s <string>\n", argv[0]);
		exit(EXIT_FAILURE);
	}

	if (pipe(pipefd) == -1) {
		perror("pipe");
		exit(EXIT_FAILURE);
	}

	cpid = fork();
		if (cpid == -1) {
		perror("fork");
		exit(EXIT_FAILURE);
	}

	if (cpid == 0) {    /* Child reads from pipe */
		close(pipefd[1]);          /* Close unused write end */

		while (read(pipefd[0], &buf, 1) > 0)
			write(STDOUT_FILENO, &buf, 1);

		write(STDOUT_FILENO, "\n", 1);
		close(pipefd[0]);
		_exit(EXIT_SUCCESS);

	} else {            /* Parent writes argv[1] to pipe */
		close(pipefd[0]);          /* Close unused read end */
		write(pipefd[1], argv[1], strlen(argv[1]));
		close(pipefd[1]);          /* Reader will see EOF */
		wait(NULL);                /* Wait for child */
		exit(EXIT_SUCCESS);
	}
}
